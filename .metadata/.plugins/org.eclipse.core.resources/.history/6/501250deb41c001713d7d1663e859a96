
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.concurrent.TimeUnit;



/**
 * Game Manager coordinates screen launches
 *
 */
public class GameManager {
	Board gameBoard = null;
	static DataClient client;
	public GameScreen game = null;
	int startHoles;
	private int move;
	StartGUI startScreen;
	boolean paused = false;
	
    /**
     * Empty constructor Game Manager
     */
	public GameManager(){
    }
	
	/**
	 * creates start screen
	 */
    public void launchStartGUI(){
    	//start GUI should decide if it is an AI client or human CLIENt
        startScreen = new StartGUI();
        while (startScreen.Wait()==true){
            System.out.println("");
        }
        startHoles = startScreen.getHoles();
        initGame(startScreen.getHoles(),startScreen.getRandomSeeds(),startScreen.getTimer(),startScreen.getTimerLength());
    
    	
    	}
   
    /**
     * Initializes the GameScreen and Board
     * @param _holes The number of holes in the board. 
     * @param _randomSeeds
     * @param _timer
     * @param _timerLength
     */
    public void initGame(int _holes, boolean _randomSeeds, boolean _timer, int _timerLength){
        //System.out.print(holes+""+randomSeeds+timer+timerLength);
        gameBoard = new Board(holes, 4 ,randomSeeds); //need to update later
        game = new GameScreen(gameBoard, holes);
        
        runningGame(game, holes, randomSeeds);
        
    }
    
    /**
     * watches the running game and takes care of clicks accordingly
     * @param game, the current GameScreen
     * @param board, the current board
     */
    public void runningGame(GameScreen game, int numHoles,Boolean randomSeeds){
        while(!gameBoard.checkEndState() && !game.endGame){
            if(game.clickOccurred()){
            	//System.out.println("moving");
                setMove(game.getRow(), game.getColumn());
                gameBoard.movePiece(game.getRow(), game.getColumn(), game.boardGUI.getPiRule());
                game.createAndShowGUI(gameBoard, numHoles);
                /*while(game.boardGUI.getPiRule())
                {
                	if(game.didClick)
                		runningGame( game,  numHoles, randomSeeds);
                	System.out.println("???");
                }*/
                game.boardGUI.falsePiRule();
                try {
                    TimeUnit.SECONDS.sleep(3);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.print("");
            	}
                
        

       // if replay then reset & relaunch
        	
        	game.endGame = false;
        	game.frame.dispose();
        	game.resetVariables();
        	game = null;
        	gameBoard = null;
        	launchStartGUI();
    }
    
    
    
 //------------------------------------------------------------------   
    public void clientLaunchStartGUI(){
    	//start GUI should decide if it is an AI client or human CLIENt
        startScreen = new StartGUI();
        while (startScreen.Wait()==true){
            System.out.print("");
        }
        startHoles = startScreen.getHoles();
        //initGame(startScreen.getHoles(),startScreen.getRandomSeeds(),startScreen.getTimer(),startScreen.getTimerLength());
    
    	//initGame(6,true,false,0,true,true);
    	
    	}
    public void clientInitGame(int holes, Boolean randomSeeds, Boolean timer, int timerLength){
        //System.out.print(holes+""+randomSeeds+timer+timerLength);
        gameBoard = new Board(holes, 4, randomSeeds); //need to update later to take in variable seeds
        game = new GameScreen(gameBoard, holes);
        
        //clientRunningGame(game, holes, randomSeeds);
        
    }
    //THIS DOESNT WORK YET
    public String clientRunningGame(GameScreen game, int numHoles, boolean _isPlayerOne){
    	String moveReturn = "";
    	StringBuilder moveBuilder = new StringBuilder();
    	int move=-1;
    	boolean turnSwitch = false;
    	while(!gameBoard.checkEndState() && !game.endGame){
            if(game.clickOccurred()){
            	
            	/*if(game.boardGUI.getPiRule()){
            		System.out.println("moving-");
                    setMove(game.getRow(), game.getColumn());
                    gameBoard.movePiece(game.getRow(), game.getColumn(), game.boardGUI.getPiRule());
                    System.out.println("...");
                    game.createAndShowGUI(gameBoard, numHoles);
                    System.out.println("done");
                    while(game.boardGUI.getPiRule())
                    {
                    	System.out.println("???");
                    }
            	}*/
                //System.out.println(game.boardGUI.getPiRule());
            	move = game.getColumn();
                setMove(game.getRow(), game.getColumn());
                gameBoard.movePiece(game.getRow(), game.getColumn(), game.boardGUI.getPiRule());
                game.createAndShowGUI(gameBoard, numHoles);
                
                if(_isPlayerOne){ 
                	move +=1;
					//System.out.println(move);
					moveBuilder.append(move);
					moveBuilder.append(" ");
					if(!game.boardGUI.player1){
						turnSwitch = true;
					}
					
				}
				else{
					move = numHoles - (numHoles - move);
					moveBuilder.append(move);
					moveBuilder.append(" ");
					if(game.boardGUI.player1){
						turnSwitch = true;
					}
				}
                try {
                    TimeUnit.SECONDS.sleep(3);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.print("");
            if(turnSwitch){
        		return moveBuilder.toString();
        	}
    	}
    	return moveReturn;
    }
    
    public void clientEndGame(){
    	game.endGame = false;
    	game.frame.dispose();
    	game.resetVariables();
    	game = null;
    	gameBoard = null;
    	launchStartGUI();
    }
    
    
    //Used for client
    public int getMove(){
    	return move;
    }
    
    private void setMove(int row, int column){
    	
    	if(row == 1){
    		move = column*2;
    	}
    	else{
    		move = column;
    	}
    }
       
    public static void main(String[] args) throws Exception {
    	GameManager gm = new GameManager();
        gm.launchStartGUI();     
    }
    
}
