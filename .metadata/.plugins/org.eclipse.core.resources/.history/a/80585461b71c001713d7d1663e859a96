import static org.junit.Assert.*;
import org.junit.Test;

public class AITest {
	//test with initial board of 6 houses and 4 in each.  depth of 3
	@Test
	public void bestMove1() {
		Board board = new Board(6,4,false);
		AI ai = new AI(7, true);
		ai.eval(board, true);
		assertTrue(ai.getBestMove() == 2);
	}
	
	@Test
	public void bestMovet() {
		Board board = new Board(6,4,false);
		AI ai = new AI(3, true);
		ai.eval(board, true);
		assertTrue(ai.getBestMove() == 2);
	}
	
	@Test
	public void bestMovet2() {
		Board board = new Board(6,4,false);
		AI ai = new AI(4, true);
		ai.eval(board, true);
		assertTrue(ai.getBestMove() == 2);
	}
	
	@Test
	public void bestMovet3() {
		Board board = new Board(6,4,false);
		AI ai = new AI(5, true);
		ai.eval(board, true);
		assertTrue(ai.getBestMove() == 2);
	}
	
	@Test
	public void bestMovet4() {
		Board board = new Board(6,4,false);
		AI ai = new AI(6, true);
		ai.eval(board, true);
		assertTrue(ai.getBestMove() == 2);
	}
	
	@Test
	public void bestMovet5() {
		Board board = new Board(6,4,false);
		AI ai = new AI(7, true);
		ai.eval(board, true);
		assertTrue(ai.getBestMove() == 2);
	}
	
	@Test
	public void bestMovet6() {
		Board board = new Board(6,4,false);
		AI ai = new AI(8, true);
		ai.eval(board, true);
		assertTrue(ai.getBestMove() == 2);
	}
	
	@Test
	public void bestMovet7() {
		Board board = new Board(6,4,false);
		AI ai = new AI(9, true);
		ai.eval(board, true);
		assertTrue(ai.getBestMove() == 2);
	}
	
	//second player goes first with initial board.
	@Test
	public void bestMove2() {
		Board board = new Board(6,4,false);
		AI ai = new AI(5, false);
		ai.eval(board, false);
		assertTrue(ai.getBestMove() == 5);
	}
	//test for Pie Rule, if the num possible seeds > 2 from player 1
	//(meaning board is smaller than max number of seeds in a pot
	@Test
	public void bestMove3(){
		int [][] boardArray = {{1,1,1,1},{1,1,1,1}};
		Board board = new Board(boardArray, 0, 0, 4);
		board.movePiece(0, 0, false);
		board.movePiece(0, 1, false);
		AI ai = new AI(5, true);
		double eval = ai.eval(board, false);
		assertTrue(ai.getBestMove() == -1);
	}
	//test capture
	@Test
	public void bestMove4(){
		int [][] boardArray = {{0,0,1,1},{1,5,1,1}};
		Board board = new Board(boardArray, 0, 0, 4);
		AI ai = new AI(5, true);
		double eval = ai.eval(board, true);
		System.out.println(ai.getBestMove());
		assertTrue(ai.getBestMove() == 2);
	}

	
	
}
