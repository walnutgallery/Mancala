import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Map;
public class foobar1 {

	public class Pair<Integer, Integer1> {
	    public int first = 0;
	    public int second = 0;
	}
	
	private static boolean isPrime(int num) {
        if (num < 2) return false;
        if (num == 2) return true;
        if (num % 2 == 0) return false;
        for (int i = 3; i * i <= num; i += 2)
            if (num % i == 0) return false;
        return true;
}
	
	public static void main(String[] args) {
		// problem 1
//		int [] x = {14,27,1,4,2,50,3,1};
//		int [] y = {2,4,-4,3,1,1,14,27,50};
//		int xSum = 0;
//		for(int i : x){
//			xSum+=i;
//		}
//		int ySum = 0;
//		for(int j :y){
//			ySum+=j;
//		}
		
		
		
		
		
		//problem 2
//		int ans = x.length > y.length? xSum-ySum: ySum-xSum;
//		System.out.println(ans);
//		int [] pegs ={4,30,50};
//		int front,back;
//		front = back = 0;
//		for(int i = 0 ; i < pegs.length-1; i++){
//			front+=pegs[i]*(Math.pow(-1,i));
//			back+=pegs[i+1]*(Math.pow(-1,i));
//		}
//		
//		int sum = back-front;
//		int numerator = sum*2;
//		int denominator = pegs.length %2 == 0 ? 3 : 1;
//	    if(numerator%3==0 && denominator ==3){
//		    numerator=numerator/3;
//		    denominator=1;
//		}
//	    
//        int [] temp = {numerator,denominator};
//        boolean checker = false;
//        double test = (double) numerator/denominator;
//        if(test <= 1)
//        	checker = true;
//        for(int i = 0 ; i < pegs.length-1; i ++){
//            test = pegs[i+1]-test-pegs[i];
//            if(test <= 1){
//            	checker = true;
//            	break;
//            }
//        }
//		System.out.println(checker);
//	}
		
		
		
		//problem 3
//		long test;
//		int x=100000;
//		int y=100000;
//		int param = x+y-1;
//		test=(long) (.5*param*(param-1)+1)+(x-1);
//		String str = Long.toString(test);
		int [] list = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
		
		
		ArrayList<Integer> indexOfOnes = new ArrayList<Integer>();
		ArrayList<Integer> primeSequence = new ArrayList<Integer>();
		int primeCounter = 0;
		int primeIndexCounter = 0;
		for(int i = 0; i < list.length ; i++){
			if(list[i] == 1){
				indexOfOnes.add(i);
			}
			if(isPrime(list[i])){
				primeSequence.add(primeIndexCounter, 0);
				for(int j = i ; j<list.length; j ++){
					if(j%i==0)
						primeSequence.set(primeIndexCounter, primeSequence.get(primeIndexCounter)+1);
				}
				primeIndexCounter++;
			}
		}
		
	System.out.println("done");
}		
	
}
