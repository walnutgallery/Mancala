import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.Timer;


/**
 * A TCP server that runs on port 9090.  When a client connects, it
 * sends the client the current date and time, then closes the
 * connection with that client.  Arguably just about the simplest
 * server you can write.
 */
public class DataServer {
    public static void main(String[] args) throws IOException {
        ServerSocket listener = new ServerSocket(9090);
        System.out.println("The Mancala Server is Running");
        try {
            while (true) {   
                Game gm = new Game();
                Game.Player playerOne = gm.new Player(listener.accept(), true);
                Game.Player playerTwo = gm.new Player(listener.accept(), false);     
                playerOne.start();
                playerTwo.start();
            }
        }
        finally {
            listener.close();
        }
    }

}

/*************************************************************************
 * Server stuff below represents the start on what is needed for sprint 3
 **************************************************************************/

/**
 * Checks if anticipated move is valid
 * @param player, player that is trying to move
 * @param column, column that said player is trying to move to
 * @return
 */
	class Game{
		
		Board gameBoard;
		int numPlayersConnected;
		boolean hasBegun = false;
		
		public void setInfo(string _infoString){
			boolean random = _random.substring(0,1) == "R";
			Board board = new Board(numHouses, numSeeds, random);
		}
		
		public void makeMove(Player player, int column, boolean pieMove) throws IllegalArgumentException{
			int row = player.isPlayerOne ? 0 : 1;
			gameBoard.movePiece(row, column, pieMove);
		}

		
		public boolean validMove(Player player, int column){
			return gameBoard.validMove(player.isPlayerOne == true ? 0 : 1, column);
		}
		/**
		 * checks endState
		 * @return true if game is over, false otherwise
		 */
		public boolean gameOver(){
			if(gameBoard.checkEndState()){
				return true;
			}
			return false;
		}
		
		public void endGame(boolean playerOneOrTwo){
			
		}
		
	
		
		/**
		* Each player has a thread to send requests to/from server	
		*
		*/
		class Player extends Thread{
			//player, socket, buffered Reader, buffered writer
			
			Socket socket;
			Boolean isPlayerOne;
			BufferedReader input;
			PrintWriter output;
			int time = 15; // change this with options panel
			Timer timer;
			
			
			/**
			 * An object to represent every player
			 * @param _socket, socket to send requests to and from
			 * @param _playerOneOrTwo, which player is playing
			 */
			public Player(Socket _socket, Boolean _isPlayerOne){
				this.socket = _socket;
				this.isPlayerOne = _isPlayerOne;
				try {
		            input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		            output = new PrintWriter(socket.getOutputStream(), true);
		            
		            
		            String player;
		            if(isPlayerOne){
		            	player = "Player One";
		            }
		            else{
		            	player = "Player" + " " + "Two";
		            }
		            output.println("WELCOME"+ " " + player);
		            Game.this.numPlayersConnected++;
		            String infoString = "INFO 6 4 5000 F S";
		            if(isPlayerOne){
		            	output.println(infoString); // send board configuration to players
		            	setInfo(infoString);
		            }
		            else{
		            	output.println("INFO 6 4 5000 S S"); // send board configuration to players
		            }
		            
		            if(Game.this.numPlayersConnected>=3){
		            	throw new RuntimeException("Too many players");
		            }
		            
		            
		        } catch (IOException e) {
		            //do nothing
		        	System.out.println("Exception");
		        }	
			}
			
			
			public void run() {
		        try {
		        	//Get this configuration from the options panel later
		            
		            
		            // Repeatedly get commands from the client and process them.
		            while (true) {
		                String command = input.readLine();
		                String[] tokens = command.split("\\s+");
		                switch(tokens[0]){
		                	case "READY":
		                		//when all clients are connected, send begin
		                		if(numPlayersConnected == 2){
			                		output.println("BEGIN"); // check, send this to both clients?
			                		Game.this.hasBegun = true;
		                		}
		                		
		                		break;
		                		
		                	case "0": case "1": case "2": case "3":
		            		case "4": case "5": case "6": case "7": 
		            		case "8": case "9":
		            			int index = 0;
		            			while(index < tokens.length){
			            			try{
			            				makeMove(this, Integer.parseInt(tokens[0]),false);
			            			}
			            			catch(IllegalArgumentException e){
			            				output.println("ILLEGAL");
			            			}
			            			index++;
		            			}
		            			//check if move is valid, do the move, check for end game
		            			/*
		            			 * iterate through all tokens, for each token
		            			 * if(token click is a valid move) - NOTE: this needs conversion, out setup doesn't match the messages, conversion in client file
		            			 * 	call move piece
		            			 * else
		            			 * 	call game over with INVALID
		            			 * check for end game
		            			 * if(game over)
		            			 * 	notify winner and loser,
		            			 */
		            			break;
		            			
		            		case "P":
		            			//do exactly as above, but with pie move and without iteration
		            			try{
		            				makeMove(this, -1 ,true);
		            			}
		            			catch(IllegalArgumentException e){
		            				output.println("ILLEGAL");
		            			}
		            			break;
		            		
		            		case "OK":
		            			break;
		                }
		                
		            }
		        } catch (IOException e) {
		        } finally {
		            try {socket.close();} catch (IOException e) {}
		        }
		    }
		
		public void main(String[] args) {
		    GameManager gm = new GameManager();
		    //gm.launchStartGUI();
		}
	}
}

