import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Arrays;

import org.junit.Test;

public class BoardTest {
	
	@Test
	public void testSecondaryConstructor(){
		
		int [][] boardArray = {{10,1,10,0,8,1},{1,1,3,2,10,2}};
		Board board = new Board(boardArray, 5, 4, 6);
		assertTrue(Arrays.deepEquals(board.getBoardArray(), boardArray) &&
				board.getPlayerOneStore() == 5 &&
				board.getPlayerTwoStore() == 4);
	}
	//normal move
	@Test
	public void testMovePiece(){
		int [][] boardArray = {{10,1,10,0,8,1},{1,1,3,2,10,2}};
		
		Board board = new Board(boardArray, 5, 4, 6);
		assertTrue(!board.movePiece(0, 4 , false));
		int [][] movedArray = {{11,2,11,1,0,1},{2,2,4,2,10,2}};
		assertTrue(Arrays.deepEquals(board.getBoardArray(), movedArray));
		assertTrue(board.getPlayerOneStore()==6);
		assertTrue(board.getPlayerTwoStore()==4);
	}
	//invalid move
	@Test
	public void testMovePiece2(){
		int [][] boardArray = {{10,1,10,0,8,1},{1,1,3,2,10,2}};
		Board board = new Board(boardArray, 5, 4, 6);
		try{
		board.movePiece(0, 3, false);
		}
		catch(IllegalArgumentException e){
			assertTrue(true);
		}
		
	}
	//normal move 2
	@Test
	public void testMovePiece3(){
		int [][] boardArray = {{11,2,11,1,0,1},{2,2,4,2,10,2}};
		Board board = new Board(boardArray, 6, 4, 6);
		assertTrue(!board.movePiece(1, 4, false));
		int [][] movedArray = {{12,3,12,2,1,2},{3,3,4,2,0,3}};		
		assertTrue(Arrays.deepEquals(board.getBoardArray(), movedArray));
		assertTrue(board.getPlayerOneStore()==6);
		assertTrue(board.getPlayerTwoStore()==5);
	}
	//move ending in a player's store
	@Test
	public void testMovePiece4(){
		int [][] boardArray= {{12,2,14,2,1},{3,3,4,2,0}};
		Board board = new Board(boardArray, 6, 4, 5);
		assertTrue(board.movePiece(0, 2, false));
		int [][] movedArray = {{14,4,1,3,2},{4,4,5,3,1}};
		assertTrue(Arrays.deepEquals(board.getBoardArray(), movedArray));
		assertTrue(board.getPlayerOneStore()==8);
		assertTrue(board.getPlayerTwoStore()==4);
	}
	//move ending with a capture 1
	@Test
	public void testMovePiece5(){
		int [][] boardArray= {{12,2,12,2,1,2},{3,3,0,2,0,0}};
		Board board = new Board(boardArray, 6, 4, 6);;
		assertTrue(!board.movePiece(1, 3, false));
		int [][] movedArray = {{12,2,12,2,1,0},{3,3,0,0,1,0}};
		assertTrue(Arrays.deepEquals(board.getBoardArray(), movedArray));
		assertTrue(board.getPlayerOneStore()==6);
		assertTrue(board.getPlayerTwoStore()==7);
	}
	//move ending with a capture 2
	@Test
	public void testMovePiece6(){
		int [][] boardArray= {{12,0,12,2,1,2},{3,3,0,2,0,0}};
		Board board = new Board(boardArray, 6, 4, 6);
		assertTrue(!board.movePiece(0, 3, false));
		int [][] movedArray = {{12,0,13,0,1,2},{3,0,0,2,0,0}};
		assertTrue(Arrays.deepEquals(board.getBoardArray(), movedArray));
		assertTrue(board.getPlayerOneStore()==10);
		assertTrue(board.getPlayerTwoStore()==4);
	}
	//test with 9 houses
	@Test
	public void testMovePiece7(){
		int [][] boardArray= {{12,0,12,2,1,2,4,5,6},{3,3,0,2,0,3,4,5,6}};
		Board board = new Board(boardArray, 6, 4, 9);
		assertTrue(!board.movePiece(0, 2, false));
		assertTrue(board.getPlayerOneStore()==7);
		assertTrue(board.getPlayerTwoStore()==4);
	}
	//test with 9 houses and capture
	@Test
	public void testMovePiece8(){
		int [][] boardArray= {{12,0,12,2,1,2,4,5,6},{3,3,0,2,0,3,4,5,6}};
		Board board = new Board(boardArray, 6, 4, 9);
		assertTrue(!board.movePiece(0, 3, false));
		assertTrue(board.getPlayerOneStore()==10);
		assertTrue(board.getPlayerTwoStore()==4);
	}
	//pie rule test
	@Test
	public void testMovePiece9(){
		int [][] boardArray= {{12,0,12,2,1,2,4,5,6},{3,3,0,2,0,3,4,5,6}};
		Board board = new Board(boardArray, 6, 4, 9);
		board.movePiece(-1, -1, true);
		int [][] movedArray = {{12,0,13,0,1,2,4,5,6},{3,0,0,2,0,3,4,5,6}};
		
		assertTrue(board.getPlayerOneStore()==4);
		assertTrue(board.getPlayerTwoStore()==6);
	}
	
	@Test
	public void testValidMoves(){
		int [][] boardArray= {{12,0,12,2,1,2},{3,3,0,2,0,0}};
		Board board = new Board(boardArray, 4, 5, 6);
		ArrayList <Integer> check = new ArrayList <> (Arrays.asList(0,2,3,4,5));
		assertTrue(check.equals(board.validMoves(true)));
	}
	@Test
	public void testValidMoves2(){
		int [][] boardArray= {{12,0,12,2,1,2},{3,3,0,2,0,0}};
		Board board = new Board(boardArray, 4, 5, 6);
		ArrayList <Integer> check = new ArrayList <> (Arrays.asList(0,1,3));
		assertTrue(check.equals(board.validMoves(false)));
	}
	
	
	@Test
	public void testCheckEndState(){
		int [][] boardArray= {{12,0,4,2,1,2},{0,0,0,0,0,0}};
		Board board = new Board(boardArray, 13, 14, 6);
		assertTrue(board.checkEndState());
		assertTrue(board.getPlayerOneStore() == 34);
		assertTrue(board.getPlayerTwoStore() == 14);
	}
	@Test
	public void testCheckEndState2(){
		int [][] boardArray= {{0,0,0,0,0,0},{12,0,4,2,1,2}};
		Board board = new Board(boardArray, 13, 14, 6);
		assertTrue(board.checkEndState());
		assertTrue(board.getPlayerOneStore() == 13);
		assertTrue(board.getPlayerTwoStore() == 35);		
	}

}
