import java.util.ArrayList;


public class AI {
    
    private int maxDepth;
    private int bestMove = 0;
    private int numNodes = 0;
    boolean player;
    int timer;
    boolean usingTimer = false;
//    int alpha=(int) Double.NEGATIVE_INFINITY;
//    int beta=(int) Double.POSITIVE_INFINITY;
    
    /** Initializes an AI with a maxDepth
     *
     * @param _maxDepth The number of levels that the minimax function will go through.
     */
    public AI(int _maxDepth, boolean _player){
        maxDepth = _maxDepth;
        player = _player;
    }
    
    /** Initializes an AI with a time limit.
     * Will calculate the max depth an AI will go.  
     * @param _player Which player the AI should be.
     * @param _timer How long the timer is in milliseconds 
     */
    public AI(boolean _player, int _timer){
    	timer = _timer;
    	player = _player;
    	usingTimer = true;
    	maxDepth = calculateMaxDepth(_timer);
    }
    
    /** Calculates the max depth the AI should have.
     * Tries multiple evaluation functions with i depth, until it takes too long.
     * @return The maximum depth.
     */
    int calculateMaxDepth(int _timer){
    	int maxDepth = (int) (Math.log(_timer/1000)/Math.log(2)) + 5;
    	return maxDepth;
    }
    
    /** The original eval function for use in the Client AI. 
     * 
     * @param node The board that you want to evaluate
     * @param playerOneOrTwo The player of the current turn.
     * @return a utility function for the board.
     */
     double eval(Board node, boolean playerOneOrTwo){
    	 System.out.println("playerOne" + playerOneOrTwo);
    	 System.out.println(node.toString());
        numNodes = 0;
        node.parent = null;
        node.previous = -1;
        //return miniMax(node,maxDepth, playerOneOrTwo);
        return miniMax(node, maxDepth, playerOneOrTwo, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
    }
    
    /**Evaluates a board "node" for player one or two
     * Returns the best utility for the board. 
     * Used in the calculate maxDepth
     * @param node
     * @param playerOneOrTwo
     * @param _maxDepth the maximum depth.
     * @return a utility function for the board.
     */
    public double eval(Board node, boolean playerOneOrTwo, int _maxDepth){
        numNodes = 0;
        node.parent = null;
        node.previous = -1;
        //return miniMax(node,maxDepth, playerOneOrTwo);
        return miniMax(node, _maxDepth, playerOneOrTwo, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
    }
    
    /** The minimax function for use in the eval function.
     * Implements alpha beta pruning and pie move recognition. 
     * @param board The board you want to evaluate
     * @param depthToGo The depth left before it stops. 
     * @param playerOneOrTwo The player that it's calculating at that level
     * @param alpha The alpha cutoff 
     * @param beta The beta cutoff
     * @return a utility function for the children
     */
    public double miniMax(Board board, int depthToGo, boolean playerOneOrTwo, double alpha, double beta){
		int local = -1;
		double maxOrMin = playerOneOrTwo ? Double.NEGATIVE_INFINITY: Double.POSITIVE_INFINITY;
		numNodes++;
		if(board.checkEndState() || depthToGo == 0)
			return board.utility(player);
		//create children 
		ArrayList<Board> children = board.getChildren(playerOneOrTwo);
		//explore
		for(Board child : children){
			double nextUtility = miniMax(child, depthToGo-1, !playerOneOrTwo, alpha, beta);
			if(playerOneOrTwo == (nextUtility > maxOrMin)){
				maxOrMin = nextUtility;
				local = child.previous;
			}
			if(playerOneOrTwo){
				alpha = Double.max(alpha, maxOrMin);
			}
			else{
				beta = Double.min(beta, maxOrMin);
			}
			if(beta <= alpha)
				break;
		}
		bestMove = local;
		return maxOrMin;
	}
    
    /** Getter method for number of nodes in minimax tree.
     * Used mainly for debuging purposes
     * @return the size of the tree.
     */
    public int getNumNodes(){
        return numNodes;
    }
    
    /** Getter method for the best move.
     * Used in conjunction with the eval function to get the best move in the Client.
     * @return the best move with certain depth.
     */
    public int getBestMove(){
        return bestMove;
    }
				
}


